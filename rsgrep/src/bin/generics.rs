/** 
 * ジェネリクスは関数やデータ型を任意の型に対して動作するように一般化するときに使える仕組み。
 * ジェネリクスを利用することで、何度も同じような関数や、データ型の定義をしなくてすむ。
 * fn 関数名<型パラメータ, ...>(引数)　-> 返り値の型　{
 *      関数本体
 * }
 * 型パラメータとして指定したものは、引数と返り値の両方で使える。
*/

// 任意の型の引数を２つ取り、タプルを返す関数を定義して使う
fn pair<T, S>(t: T, s: S) -> (T, S) {
    (t, s)
}

fn main(){
    // T = i32, S = f64で呼び出す。
    //println!("{:?}", pair(1, 1.0));
    let i = pair(1, 1.0);
    // 型を明示する方法もある
    let j = pair::<isize, f64>(1, 1.0);

    // T = &str, S = Stringで呼び出す
    let s = pair("str", "string".to_string());

    // 
    println!("i => {:?}",i);
    println!("j => {:?}",j);
    println!("s => {:?}",s);
}

/* 
 * 関数、構造体、さまざまなデータ型も同じ構文でジェネリックにできる。
*/